void printTopViewUtil(Node* root, int height, 
    int hd, map<int, pair<int, int> >& m) 
{ 
    // Base Case 
    if (root == NULL) 
        return; 
  
    // If the node for particular horizontal distance 
    // is not present in the map, add it. 
    // For top view, we consider the first element  
    // at horizontal distance in level order traversal 
    if (m.find(hd) == m.end()) { 
        m[hd] = make_pair(root->data, height); 
    } 
    else{ 
        pair<int, int> p = (m.find(hd))->second; 
                  
        if (p.second > height) { 
            m.erase(hd); 
            m[hd] = make_pair(root->data, height); 
        } 
    } 
  
    // Recur for left and right subtree 
    printTopViewUtil(root->left, height + 1, hd - 1, m); 
    printTopViewUtil(root->right, height + 1, hd + 1, m); 
}


void topView(struct Node *root)
{
    //Your code here
    map<int, pair<int, int> > m; 
    printTopViewUtil(root, 0, 0, m); 
  
    // Print the node's value stored by printTopViewUtil() 
    for (map<int, pair<int, int> >::iterator it = m.begin();  
                                        it != m.end(); it++) { 
        pair<int, int> p = it->second; 
        cout << p.first << " "; 
    } 
}
