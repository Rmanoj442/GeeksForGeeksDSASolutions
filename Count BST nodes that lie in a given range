int getCountOfNode(Node *root, int low, int high)
{
  // your code goes here   
    if (!root) return 0; 
  
    // Special Optional case for improving efficiency 
    if (root->data == high && root->data == low) 
        return 1; 
  
    // If current node is in range, then include it in count and 
    // recur for left and right children of it 
    if (root->data <= high && root->data >= low) 
         return 1 + getCountOfNode(root->left, low, high) + 
                    getCountOfNode(root->right, low, high); 
  
    // If current node is smaller than low, then recur for right 
    // child 
    else if (root->data < low) 
         return getCountOfNode(root->right, low, high); 
  
    // Else recur for left child 
    else return getCountOfNode(root->left, low, high); 
}
