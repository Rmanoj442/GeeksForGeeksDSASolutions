vector<int> printNearNodes(Node *root, int n1, int n2)
{
  // your code goes here   
    vector<int> a;
    if (!root) 
        return a; 
  
    Node* curr = root; 
  
    while (curr) { 
  
        if (curr->left == NULL)  
        { 
            // check if current node  
            // lies between n1 and n2 
            if (curr->data <= n2 &&  
                curr->data >= n1)  
            { 
                a.push_back(curr->data); 
            } 
  
            curr = curr->right; 
        } 
  
        else { 
            Node* pre = curr->left; 
            // finding the inorder predecessor- 
            // inorder predecessor is the right 
            // most in left subtree or the left  
            // child, i.e in BST it is the  
            // maximum(right most) in left subtree. 
            while (pre->right != NULL &&  
                   pre->right != curr) 
                        pre = pre->right; 
  
            if (pre->right == NULL)  
            { 
                pre->right = curr; 
                curr = curr->left; 
            } 
  
            else { 
                pre->right = NULL; 
  
                // check if current node lies  
                // between n1 and n2 
                if (curr->data <= n2 &&  
                    curr->data >= n1)  
                { 
                    a.push_back(curr->data); 
                } 
  
                curr = curr->right; 
            } 
        } 
    } 
    return a;
}
